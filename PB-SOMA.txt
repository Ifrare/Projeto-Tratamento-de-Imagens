void setup() {
  size(426, 640);
  
  // Carrega as duas imagens
  PImage img1 = loadImage("PB-01.jpg");
  PImage img2 = loadImage("PB-02.jpg");
  
  // Verifica se as imagens possuem o mesmo tamanho
  if (img1.width != img2.width || img1.height != img2.height) {
    println("As imagens devem ter o mesmo tamanho");
    exit();
  }
  
  // Cria uma nova imagem para armazenar a soma
  PImage imgSoma = createImage(img1.width, img1.height, RGB);
  
  // Percorre cada pixel das imagens e soma seus valores
  for (int y = 0; y < img1.height; y++) {
    for (int x = 0; x < img1.width; x++) {
      int pos = y * img1.width + x;
      int cor1 = img1.pixels[pos];
      int cor2 = img2.pixels[pos];
      
      // Separa os componentes RGB de cada cor
      int r1 = (cor1 >> 16) & 0xFF;
      int g1 = (cor1 >> 8) & 0xFF;
      int b1 = cor1 & 0xFF;
      int r2 = (cor2 >> 16) & 0xFF;
      int g2 = (cor2 >> 8) & 0xFF;
      int b2 = cor2 & 0xFF;
      
      // Soma os componentes RGB e limita o valor m√°ximo a 255
      int rSoma = min(r1 + r2, 255);
      int gSoma = min(g1 + g2, 255);
      int bSoma = min(b1 + b2, 255);
      
      // Cria a nova cor a partir dos componentes RGB somados
      int corSoma = color(rSoma, gSoma, bSoma);
      imgSoma.pixels[pos] = corSoma;
    }
  }
  
  // Atualiza a imagem na tela
  imgSoma.updatePixels();
  image(imgSoma, 0, 0);
  save("PB-SOMA.jpg");
}